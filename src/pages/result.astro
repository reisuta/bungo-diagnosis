---
import Layout from '../layouts/Layout.astro'
---

<Layout title="診断結果">
  <div class="max-w-4xl mx-auto">
    <div class="bg-white rounded-lg shadow-lg p-8 text-center">
      <h1 class="text-4xl font-bold mb-4 text-gray-800">
        診断結果
      </h1>

      <!-- ローディングスピナー -->
      <div id="loadingSpinner" class="text-center py-8">
        <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <p class="mt-4 text-gray-600">診断結果を計算中...</p>
      </div>

      <!-- メインコンテンツ -->
      <div id="mainContent" class="hidden smooth-transition">
        <div id="resultCard" class="bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg p-8 mb-8">
          <!-- 結果はJavaScriptで動的に挿入 -->
        </div>

        <div id="descriptionCard" class="bg-gray-50 rounded-lg p-6 mb-8 text-left">
          <!-- 説明はJavaScriptで動的に挿入 -->
        </div>
      </div>

      <div class="flex flex-col sm:flex-row gap-4 justify-center">
        <a href="/" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300 shadow-md">
          もう一度診断する
        </a>
        <a href="/list" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300 shadow-md">
          他の文豪を見る
        </a>
        <a id="detailLink" href="#" class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300 shadow-md">
          詳細を見る
        </a>
      </div>

      <div class="mt-8 p-4 bg-yellow-50 rounded-lg">
        <p class="text-sm text-gray-600">
          この診断は娯楽目的のものです。実際の性格や才能を保証するものではありません。
        </p>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { clearDiagnosisData } from '../scripts/diagnosis-client'
  import { authors } from '../data/authors'
  import { diagnose, type Stage3Answers } from '../utils/diagnosis'
  import {
    validateSessionIntegrity,
    getValidatedStageData,
    sanitizeStageData,
    validateDiagnosisInputs
  } from '../utils/validation'
  import {
    handleDiagnosisError,
    DiagnosisError,
    DiagnosisErrorCode
  } from '../utils/errorHandling'

  try {
    // セッション整合性の事前チェック
    if (!validateSessionIntegrity()) {
      throw new DiagnosisError(
        'Session integrity check failed',
        DiagnosisErrorCode.INTEGRITY_CHECK_FAILED
      )
  }

    // 各段階のデータを安全に取得・検証
    const stage3Data = getValidatedStageData(3)

  if (!stage3Data) {
      throw new DiagnosisError(
        'Stage 3 data not found or invalid',
        DiagnosisErrorCode.MISSING_STAGE_DATA,
        { stage: 3 }
      )
  }

    // データのサニタイズ
    const sanitizedData = sanitizeStageData(stage3Data)

  // 必須フィールドの存在確認
  if (
      typeof sanitizedData.stage1Score !== 'number' ||
      typeof sanitizedData.stage2Score !== 'number' ||
      typeof sanitizedData.isGeneral !== 'boolean'
    ) {
      throw new DiagnosisError(
        'Missing required fields in stage data',
        DiagnosisErrorCode.VALIDATION_FAILED,
        { missingFields: { stage1Score: sanitizedData.stage1Score, stage2Score: sanitizedData.stage2Score, isGeneral: sanitizedData.isGeneral } }
      )
  }

    // Stage3Answers の安全な構築
    const stage3Answers: Stage3Answers = {}
  const answers = sanitizedData.answers || {};

    // 各回答の検証とサニタイズ
    ['ques1', 'ques2', 'ques3', 'ques4', 'ques5'].forEach(question => {
      const answer = answers[question]
    if (typeof answer === 'string' && ['0', '3', '5', '7', '10'].includes(answer)) {
        stage3Answers[question as keyof Stage3Answers] = answer
    }
    })

  // 診断実行前の最終検証
  if (!validateDiagnosisInputs(
      sanitizedData.stage1Score,
      sanitizedData.stage2Score,
      sanitizedData.score,
      sanitizedData.isGeneral,
      stage3Answers
    )) {
      throw new DiagnosisError(
        'Diagnosis input validation failed',
        DiagnosisErrorCode.VALIDATION_FAILED,
        {
          inputs: {
            stage1Score: sanitizedData.stage1Score,
            stage2Score: sanitizedData.stage2Score,
            stage3Score: sanitizedData.score,
            isGeneral: sanitizedData.isGeneral
          }
        }
      )
  }

    // 診断を実行（検証済みデータのみ使用）
    const authorId = diagnose(
      sanitizedData.stage1Score,
      sanitizedData.stage2Score,
      sanitizedData.score,
      sanitizedData.isGeneral,
      stage3Answers
    )

  // 結果の検証
  const author = authors.find(a => a.id === authorId)
  if (!author) {
      throw new DiagnosisError(
        'Invalid diagnosis result',
        DiagnosisErrorCode.DIAGNOSIS_CALCULATION_FAILED,
        { authorId, availableAuthors: authors.map(a => a.id) }
      )
  }

    // タイトルを更新
    document.title = `診断結果: ${author.name}`

  // 結果カードを表示
  const resultCard = document.getElementById('resultCard')!
  resultCard.innerHTML = `
      <h2 class="text-3xl font-bold mb-2">
        ${author.name}
      </h2>
      <p class="text-xl">
        ${author.type}
    </p>
  `

  // 説明カードを表示
  const descriptionCard = document.getElementById('descriptionCard')!
  descriptionCard.innerHTML = `
      <h3 class="text-xl font-semibold mb-4 text-gray-800">
        ${author.name}について
      </h3>
      <p class="text-gray-700 leading-relaxed">
        ${author.description || `${author.name}は${author.type}として知られています。詳細な性格分析は準備中です。`}
    </p>
  `

  // 詳細リンクを設定
  const detailLink = document.getElementById('detailLink') as HTMLAnchorElement
  detailLink.href = `/authors/${author.id}`

  // ローディング完了後にコンテンツを表示
  const loadingSpinner = document.getElementById('loadingSpinner')!
  const mainContent = document.getElementById('mainContent')!

  setTimeout(() => {
      loadingSpinner.classList.add('hidden')
    mainContent.classList.remove('hidden')
    mainContent.classList.add('fade-in')
  }, 300) // 結果計算の演出のため少し長めの遅延

  // 診断データをクリア（次回の診断のため）
  clearDiagnosisData()

} catch (error) {
    // エラーハンドリング：全てのエラーを適切に処理
    handleDiagnosisError(error)
}
</script>
